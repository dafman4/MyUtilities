buildscript{
    repositories{ mavenCentral() }
}

plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'maven'
    id 'signing'
}

dependencies{
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: '5.4.1'

    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.8.0-beta4'
    testImplementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.3.0-alpha4'
    testImplementation group: "com.fasterxml.jackson.dataformat", name: 'jackson-dataformat-csv', version: '2.9.0'

}

publishing {
    publications {

        maven(MavenPublication) {
            groupId = 'com.squedgy'
            artifactId = 'my-utilities'
            version = '1.4'

            from components.java
        }
    }
}
uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: System.getenv('OSSRH_USERNAME'), password: System.getenv('OSSRH_PASSWORD'))
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: System.getenv('OSSRH_USERNAME'), password: System.getenv('OSSRH_PASSWORD'))
            }

            pom.project {
                name 'Utilities'
                packaging 'jar'
                // optionally artifactId can be defined here
                description 'Various utilities created and maintained by me, SquEdgy.'
                url 'https://gitlab.com/squedgy/my-utilities'

                scm {
                    connection 'scm:git:https://gitlab.com/squedgy/my-utilities.git'
                    developerConnection 'scm:git:https://gitlab.com/squedgy/my-utilities.git'
                    url 'https://gitlab.com/squedgy/my-utilities/tree/master'
                }

                licenses {
                    license {
                        name 'WTFPL - Do What the Fuck You Want to Public License'
                        url 'http://www.wtfpl.net/'
                    }
                }

                developers {
                    developer {
                        name 'David Faris'
                        email 'dafman6@outlook.com'
                        url 'https://dfaris.com'
                    }
                }
            }
        }
    }
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    sign configurations.archives
}

ext.moduleName = 'com.squedgy.utilities'

group 'com.squedgy'
archivesBaseName = 'my-utilities'
version '1.4'

sourceCompatibility = 1.11
targetCompatibility = 1.11

apply plugin: 'java'
apply plugin: 'idea'

repositories{
    mavenCentral()
}

def moduleExists = {
    def check = moduleName
    return check != null && check != ''
}

compileJava {
    if(!moduleExists()) {
        throw new IllegalArgumentException("Module Name is NOT declared in properties for " + project.name)
    }
    inputs.property("moduleName", moduleName)
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
        ]
        classpath = files()
    }
}

compileTestJava {
    if(!moduleExists()) {
        throw new IllegalArgumentException("Module Name is NOT declared in properties")
    }
    inputs.property('moduleName', moduleName)
    doFirst {
        options.compilerArgs = [
                '--module-path' , classpath.asPath,
                '--add-modules', 'org.junit.jupiter.api',
                '--add-reads', "${moduleName}=org.junit.jupiter.api",
                '--patch-module', "${moduleName}=" + files(sourceSets.test.java.srcDirs).asPath
        ]
        classpath = files()
    }
}

test {
    useJUnitPlatform()
    if(!moduleExists()) {
        throw new IllegalArgumentException("Module Name is NOT declared in properties")
    }
    inputs.property("moduleName", moduleName)
    testLogging {
        events 'passed', 'skipped', 'failed'
    }
    doFirst {
        jvmArgs = [
                '--module-path', classpath.asPath,
                '--add-modules', 'ALL-MODULE-PATH',
                '--add-reads', "$moduleName=org.junit.jupiter.api",
                '--patch-module', "$moduleName=${files(sourceSets.test.java.outputDir).asPath}:${project.buildDir.toPath().resolve("resources").resolve("test").toAbsolutePath()}"
        ]
        classpath = files()
    }
}

jar {
    baseName = 'my-utilities'
    version = '0.0.1-SNAPSHOT'
    manifest.attributes(
            provider: 'gradle',
            'Automatic-Module-Name': moduleName
    )

    baseName = project.name + '-mmm'
    version = version
}